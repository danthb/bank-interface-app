{"version":3,"file":"static/js/758.30ec0a56.chunk.js","mappings":"kQAOe,SAASA,EAAT,GAA4E,IAAzDC,EAAwD,EAAxDA,QAAQC,EAAgD,EAAhDA,SAASC,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,OAAOC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,cAEjEC,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtBF,OAER,GAAgCG,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAkCJ,EAAAA,EAAAA,UAAS,IAA3C,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAAmCR,EAAAA,EAAAA,UAAS,IAA5C,eAAOS,EAAP,KAAkBC,EAAlB,KAGA,GAAgCV,EAAAA,EAAAA,UAAS,IAAzC,eAAOW,EAAP,KAAaC,EAAb,KACA,GAAgCZ,EAAAA,EAAAA,UAAS,IAAzC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAAgCd,EAAAA,EAAAA,UAAS,IAAzC,eAAOe,EAAP,KAAiBC,EAAjB,KAGMC,EAAU,mCAAG,iGAEXpB,EAFW,gCAGUqB,EAAAA,EAAAA,MAHV,cAGPC,EAHO,OAIbT,GAAc,GAJD,kBAKNS,EAASC,MALH,OAQbV,GAAc,GACdF,GAAW,GATE,iEAYXa,QAAQC,IAAR,MAZW,6EAAH,qDA0BhB,SAASC,EAAiBC,EAAO/B,GAC/B,OAAK+B,IAKS,aAAV/B,GAAwB+B,EAAMC,OAAS,KACzCrB,EAAU,sCACVsB,YAAW,kBAAMtB,EAAU,MAAI,MACxB,IAPPA,EAAU,gBAAkBX,GAC5BiC,YAAW,kBAAMtB,EAAU,MAAI,MACxB,IAdXuB,EAAAA,EAAAA,YAAU,WACHhC,GACHsB,IAAaW,MAAK,SAAAR,GAChB,IAAIS,EAAOT,EAAKU,QAAO,SAAAD,GAAI,OAAIA,EAAKE,aAAelC,EAAOmC,OAC1DxB,EAAWqB,EAAK,GAAGtB,cAItB,CAACN,IAmGJ,OACI,SAAC,IAAD,CACMV,QAASA,EACTC,SAAUA,EACVyC,OAAQxC,EACRU,OAAQA,EACR+B,KAAMjC,GACF,UAAC,EAAAkC,SAAD,WAEExC,GACE,UAAC,EAAAwC,SAAD,WACW,UAAV1C,IACD,UAAC,EAAA0C,SAAD,mBAEI,mBACA,SAAC,IAAD,CACExB,KAAK,OACLyB,GAAG,OACHC,YAAY,aACZC,MAAO3B,EACP4B,SAAU,SAAAC,GAAC,OAAI5B,EAAQ4B,EAAEC,cAAcH,WACzC,sBAGF,kBAdF,UAeQ,mBACN,SAAC,IAAD,CACE3B,KAAK,QACL+B,KAAK,QACLN,GAAG,QACHC,YAAY,cACZC,MAAOzB,EACP0B,SAAU,SAAAC,GAAC,OAAI1B,EAAS0B,EAAEC,cAAcH,WAC1C,mBACA,kBAxBF,YAyBU,mBACR,SAAC,IAAD,CACEI,KAAK,WACLN,GAAG,WACHC,YAAY,iBACZC,MAAOvB,EACPwB,SAAU,SAAAC,GAAC,OAAIxB,EAAYwB,EAAEC,cAAcH,WAC7C,sBAGJ,UAAC,EAAAH,SAAD,uBACY1B,EAAYF,EAAU,KADlC,KACwC,mBACtC,kBACCd,EAAQ,WACT,mBACE,kBACEiD,KAAK,QACLN,GAAG,SACHC,YAAa,eACbC,MAAOjC,EACPkC,SA7HD,SAACC,GACfG,MAAMC,OAAOJ,EAAEK,OAAOP,QAGzBQ,MAAM,qCAFNxC,EAAUkC,EAAEK,OAAOP,WA4HH,sBAGN,mBACA,SAAC,IAAD,CACEI,KAAK,SACLN,GAAG,SACHW,MAAkB,aAAVtD,GAAkC,YAAVA,EAAwB,sBAAwB,iBAChFuD,QAAQ,YACRC,MAAM,UACNC,SAvHO,WACrB,GAAc,mBAAVzD,EACF,MAAc,KAAVoB,GAA6B,KAAbE,GAA4B,KAATJ,EAMzC,GAAc,UAAVlB,EACF,MAAc,KAAVoB,GAA6B,KAAbE,EAOtB,GAAKpB,EA4BE,KAAIY,EAKT,OAAO,EAJP,GAAIA,GAAW,EACb,OAAO,MA9BM,CACf,GAAc,aAAVd,EACF,OAAKc,IAAYE,IAGF,KAAXJ,GACa,IAAXA,GAQD,GAAc,YAAVZ,EACT,OAAKgB,IAGU,KAAXJ,GACa,IAAXA,IAoFc8C,GACVC,QAvJhB,WACE,GAAIzD,EAAY,CACd,GAAc,UAAVF,IACG8B,EAAiBZ,EAAU,QAAS,OAE3C,IAAKY,EAAiBV,EAAU,SAAa,OAC7C,IAAKU,EAAiBR,EAAU,YAAa,YAE7C,IAAKQ,EAAiBlB,EAAQ,UAAW,OAG3CX,EADe,CAACiB,KAAAA,EAAKE,MAAAA,EAAME,SAAAA,EAASV,OAAAA,IAEpCH,GAAQ,IAoII,SAQGT,QAIH,UAAC,EAAA0C,SAAD,YACE,SAAC,IAAD,CACEO,KAAK,SACLM,QAAQ,YACRC,MAAM,UACNG,QA1IlB,WACExC,EAAQ,IACRE,EAAS,IACTE,EAAY,IACZV,EAAU,IACVJ,GAAQ,IAiIM,SAKGN,IAEQ,mBAAVH,GAA6B,SAAC,IAAD,CAC5BiD,KAAK,SACLM,QAAQ,YACRD,MAAM,wBACNE,MAAM,YAJsB,UAK5B,SAAC,KAAD,CAAMI,UAAU,WAAWC,GAAG,SAA9B,qBACU,Y,uKClOf,SAASC,IACtB,OAAqCvD,EAAAA,EAAAA,UAAS,MAA9C,eAAOwD,EAAP,KAAmBC,EAAnB,KACA,GAAwCzD,EAAAA,EAAAA,WAAS,GAAjD,eAAO0D,EAAP,KAAqBC,EAArB,KACMC,GAAUC,EAAAA,EAAAA,MAChB,GAA4B/D,EAAAA,EAAAA,YAAWC,EAAAA,GAA/BF,EAAR,EAAQA,OAAQiE,EAAhB,EAAgBA,QAJc,wCAU9B,WAAsB1C,GAAtB,iFACQ0C,EAAQ1C,EAAKP,MAAOO,EAAKL,UAC5Ba,MAAK,WACD/B,GACD4D,EAAe5D,GACf8D,GAAgB,GAChBC,EAAQG,KAAK,MAGbJ,GAAgB,MATxB,4CAV8B,sBAuB5B,OAjBFhC,EAAAA,EAAAA,YAAU,WACR8B,EAAe5D,KACd,CAACA,KAgBA,SAAC,EAAAsC,SAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,UAEKqB,GAeG,UAAC,EAAArB,SAAD,YACA,qCAAcqB,EAAW3C,UACzB,0DAhBJ,UAAC,EAAAsB,SAAD,YACE,SAAC,IAAD,CACE5C,QAAQ,QACRyE,SAAS,QACTvE,MAAM,QACNC,OAlCc,4CAmCdC,YAAY,EACZC,cAAc,cAGhB8D,IACA,cAAGO,MAAO,CAACC,UAAW,UAAtB,wC,4EC3CVC,E,QAAUC,EAAAA,QACVC,EAAQC,aAAaC,QAAQ,SAC7BC,EAAUC,IAAAA,OAAa,CACzBN,QAASA,EACTO,QAAS,CAAEC,cAAc,UAAD,OAAYN,MAGlCnD,EAAa,CACf0D,IAAK,kBAAMJ,EAAQK,IAAI,iBACvBC,QAAS,SAAC/C,GAAD,OAAgByC,EAAQK,IAAI,WAAY,CAAEE,OAAQ,CAAEhD,WAAYA,MACzEiD,WAAY,SAAC5D,GAAD,OAAUoD,EAAQS,KAAK,kBAAmB7D,IACtD8D,QAAS,SAACC,EAAK9E,GAAN,OAAiBmE,EAAQY,IAAI,kBAAmB,CAACD,IAAKA,EAAK9E,OAAQA","sources":["components/bankform.js","components/login.js","services/index.js"],"sourcesContent":["import React, { Fragment, useState, useContext, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Link } from 'react-router-dom';\r\nimport { AuthContextFB } from \"../contexts/AuthContextFB\";\r\nimport {Card} from \"../contexts/context\";\r\nimport { accountAPI } from \"../services\";\r\nexport default function BankForm({bgcolor,bgheader,label,handle,hideAmount,successButton}){\r\n\r\n  const { authFB } = useContext(AuthContextFB);\r\n  \r\n  const [show, setShow]         = useState(true);\r\n  const [status, setStatus]     = useState('');\r\n  const [amount, setAmount]       = useState('');\r\n  const [balance, setBalance] = useState('');\r\n  const [userLoged, setUserLogged] = useState('');\r\n\r\n// UserData\r\n  const [name, setName]         = useState('');\r\n  const [email, setEmail]       = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n\r\n  const getBalance = async () => {\r\n    try {\r\n      if (authFB) {\r\n        const response = await accountAPI.all();\r\n        setUserLogged(true)\r\n        return response.data;\r\n      }\r\n      else {\r\n        setUserLogged(false)\r\n        setBalance(false)\r\n      }\r\n    }catch (error) {\r\n          console.log(error);\r\n          return\r\n      }   \r\n  }\r\n  useEffect(() => {\r\n    if (!hideAmount) {\r\n      getBalance().then(data => {\r\n        let user = data.filter(user => user.firebaseId === authFB.uid)\r\n        setBalance(user[0].balance)\r\n      })\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [show])\r\n\r\n  function validateDataUser(field, label){\r\n    if (!field) {\r\n      setStatus('Please enter ' + label);\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false;\r\n    }\r\n    if (label === 'password' && field.length < 8) {\r\n      setStatus('Please enter at least 8 characters');\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n  function handleForm(){\r\n    if (hideAmount) {\r\n      if (label !== 'Login') {\r\n        if (!validateDataUser(name,     'name')) return;\r\n      }\r\n      if (!validateDataUser(email,    'email'))    return;\r\n      if (!validateDataUser(password, 'password')) return;\r\n    } else {\r\n      if (!validateDataUser(amount, 'amount')) return;\r\n    }\r\n    let dataUser = {name,email,password,amount}\r\n    handle(dataUser)\r\n    setShow(false);\r\n  }\r\n  const handleAmount = (e) => {\r\n    if (!isNaN(Number(e.target.value))) {\r\n      setAmount(e.target.value)\r\n    } else {\r\n      alert('Only positive amounts are allowed')\r\n    }\r\n  }\r\n  \r\n\r\n  function clean(){\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n    setAmount('');\r\n    setShow(true);\r\n  }\r\n  \r\n  const buttonDisabled = () => {\r\n    if (label === 'Create Account') {\r\n      if (email !== '' || password !== '' || name !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    if (label === 'Login') {\r\n      if (email !== '' || password !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    // buttonDisabled when there isn't user logged\r\n    if (!hideAmount) {\r\n      if (label === 'Withdraw') {\r\n        if (!balance || !userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      } else if (label === 'Deposit') {\r\n        if (!userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n    } else if (balance) {\r\n      if (balance <= 0) {\r\n        return true\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  \r\n  return(\r\n      <Card\r\n            bgcolor={bgcolor}\r\n            bgheader={bgheader}\r\n            header={label}\r\n            status={status}\r\n            body={show ? (\r\n                <Fragment>\r\n                {\r\n                  hideAmount\r\n                  ? <Fragment>\r\n                    {label !== 'Login' &&\r\n                    <Fragment>\r\n                      Name\r\n                        <br />\r\n                        <TextField\r\n                          name='name'\r\n                          id=\"name\"\r\n                          placeholder=\"Enter name\"\r\n                          value={name}\r\n                          onChange={e => setName(e.currentTarget.value)} />\r\n                        <br />\r\n                    </Fragment>\r\n                      }\r\n                      <br />\r\n                      Email <br/>\r\n                      <TextField\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.currentTarget.value)}/>\r\n                      <br />\r\n                      <br />\r\n                      Password<br />\r\n                      <TextField\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.currentTarget.value)} />\r\n                      <br />\r\n                  </Fragment>\r\n                  :\r\n                  <Fragment>\r\n                    Balance: {userLoged ? balance : null} <br/>\r\n                    <br />\r\n                    {label + ' Amount'}\r\n                    <br />\r\n                      <input\r\n                        type=\"input\"\r\n                        id=\"amount\"\r\n                        placeholder={'Enter Amount'}\r\n                        value={amount}\r\n                        onChange={handleAmount} />\r\n                      <br />\r\n                  </Fragment>\r\n                }\r\n                <br />\r\n                <Button\r\n                  type=\"submit\"\r\n                  id='submit'\r\n                  title={(label === 'Withdraw' || label === 'Deposit' ) ? 'Confirm transaction' : 'Click to Login'}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={buttonDisabled()}\r\n                  onClick={handleForm} >\r\n                  {label}\r\n                </Button>\r\n                </Fragment>\r\n              ):(\r\n                <Fragment>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={clean}>\r\n                    {successButton}\r\n                  </Button>\r\n                  {label === 'Create Account' ? <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    title='Click to go the Login'\r\n                    color=\"secundary\">\r\n                    <Link className=\"nav-link\" to=\"/login\">Login</Link>\r\n                  </Button> : null}\r\n                </Fragment>\r\n            )}\r\n            />\r\n       \r\n\r\n  )\r\n}","import React, { Fragment, useEffect, useState, useContext} from 'react';\r\nimport BankForm from './bankform';\r\nimport { HashRouter as Router, useHistory } from 'react-router-dom';\r\nimport {BrowserRouter as Switch} from 'react-router-dom';\r\nimport { AuthContextFB } from '../contexts/AuthContextFB';\r\n\r\nexport default function Login() {\r\n  const [currenUser, setCurrentUser] = useState(null)\r\n  const [userNotFound, setUserNotFound] = useState(false)\r\n  const history = useHistory();\r\n  const { authFB, loginFB } = useContext(AuthContextFB)\r\n  \r\n  useEffect(() => {\r\n    setCurrentUser(authFB)\r\n  }, [authFB])\r\n  \r\n  async function handle(data) {\r\n    await loginFB(data.email, data.password)\r\n      .then(() => {\r\n        if(authFB){\r\n          setCurrentUser(authFB)\r\n          setUserNotFound(false)\r\n          history.push('/')\r\n        }\r\n        else {\r\n          setUserNotFound(true)\r\n        }\r\n      })\r\n  }\r\n    return (\r\n      <Fragment>\r\n        <Router>\r\n          <Switch>\r\n            {\r\n              !currenUser ?\r\n              <Fragment>\r\n                <BankForm\r\n                  bgcolor=\"black\"\r\n                  txtcolor='white'\r\n                  label=\"Login\"\r\n                  handle={handle}\r\n                  hideAmount={true}\r\n                  successButton=\"Try Again\"\r\n                />\r\n              {\r\n                userNotFound &&\r\n                <p style={{textAlign: 'center'}}>Please register</p> \r\n              }\r\n              </Fragment>\r\n                : <Fragment>\r\n                  <h3>Welcome { currenUser.email}</h3>\r\n                  <h5>You are logged in Badbank</h5>\r\n                  \r\n              </Fragment>\r\n            }\r\n            </Switch>\r\n            </Router>\r\n        </Fragment>\r\n        \r\n    )\r\n    \r\n}\r\n","import axios from 'axios';\r\nimport env from \"react-dotenv\";\r\n\r\nconst baseURL = env.API_URL\r\nconst token = localStorage.getItem('token')\r\nconst service = axios.create({\r\n    baseURL: baseURL,\r\n    headers: { authorization: `Bearer ${token}` },\r\n  })\r\n\r\nconst accountAPI = {\r\n    all: () => service.get('/account/all'),\r\n    getUser: (firebaseId) => service.get('/account', { params: { firebaseId: firebaseId} } ),\r\n    createUser: (data) => service.post('/account/create', data),\r\n    updated: (_id, amount) => service.put('/account/update', {_id: _id, amount: amount}),\r\n};\r\nexport { accountAPI };\r\n"],"names":["BankForm","bgcolor","bgheader","label","handle","hideAmount","successButton","authFB","useContext","AuthContextFB","useState","show","setShow","status","setStatus","amount","setAmount","balance","setBalance","userLoged","setUserLogged","name","setName","email","setEmail","password","setPassword","getBalance","accountAPI","response","data","console","log","validateDataUser","field","length","setTimeout","useEffect","then","user","filter","firebaseId","uid","header","body","Fragment","id","placeholder","value","onChange","e","currentTarget","type","isNaN","Number","target","alert","title","variant","color","disabled","buttonDisabled","onClick","className","to","Login","currenUser","setCurrentUser","userNotFound","setUserNotFound","history","useHistory","loginFB","push","txtcolor","style","textAlign","baseURL","env","token","localStorage","getItem","service","axios","headers","authorization","all","get","getUser","params","createUser","post","updated","_id","put"],"sourceRoot":""}